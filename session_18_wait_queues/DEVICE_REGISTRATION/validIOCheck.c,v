head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2020.01.27.11.31.30;	author rawat;	state Exp;
branches;
next	1.2;

1.2
date	2020.01.21.13.14.59;	author rawat;	state Exp;
branches;
next	1.1;

1.1
date	2020.01.20.08.51.26;	author rawat;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@#include"headers.h"
#include"declarations.h"

int validIOCheck(struct file *local_filep, const char __user* ubuff, size_t size )
{

	Dev *localDev=NULL;
	int local_major;
	localDev= (Dev*)local_filep->private_data;
	
	
	printk(KERN_INFO "%s: BEGIN \n",__func__);

	local_major= MAJOR(localDev->c_dev.dev);
	if(!(local_major >0 && local_major <256))
	{
		printk(KERN_ERR "ERROR: invalid major number");
		return 0;
	}

	printk(KERN_INFO "major number is %d \n",local_major);
	if( ubuff == NULL)
	{
		printk(KERN_ERR "ERROR: invalid buffer");
		return 0;
	}	
	if(size < 0)
	{		
		printk(KERN_ERR "ERROR: invalid size");
		return 0;
	}
	printk(KERN_INFO "%s: END \n",__func__);

return 1;
}
@


1.2
log
@*** empty log message ***
@
text
@d12 1
a12 1
	printk(KERN_INFO "START: #%s #%s \n",__FILE__,__func__);
d32 1
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
int validIOCheck(struct file *filep, const char __user* ubuff, size_t size )
d9 2
a10 1
	localDev= (Dev*)filep->private_data;
@
